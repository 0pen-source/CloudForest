CloudForest is a go/golang implementation of some utilities for analizng and scaling ensembels of decision trees developed at the Institute for Systems Biology and realesed under a modified BSD license.

It does note yet include functionality for growing ensembels of trees but will parse ensembels generated by rf-ace (http://code.google.com/p/rf-ace/ which implements Brieman and Cutler's "Random Forest" and other methods). 

A main design goal is to provide abstractions that make it easy for a researcher to add needed functionality. For example the application of trees to data has been abstracted so that it can be used in utilites to track co-ocurance statistics (leaf count) as well as the more typical case of reporting votes shown in this code sample:

func (t *Tree) Vote(fm *FeatureMatrix, bb *BallotBox) {
	ncases := len(fm.Data)
	cases := make([]int, 0, ncases)
	for i := 0; i < ncases; i++ {
		cases = append(cases, i)
	}

	t.Root.Recurse(func(n *Node, cases []int) {
		if n.Left == nil && n.Right == nil {
			// I'm in a leaf node
			for i := 0; i < len(cases); i++ {
				bb.Vote(cases[i], n.Pred)
			}
		}
	}, fm, cases)
}

Current Capabilities:
Parse an a predictor forest from rf-ace.
Parse an AFM feature matrix.
Apply a predictor forest to a feature matrix.
Call a closure/function with the signature of CloudForest.Recursable at each node of each tree while doing the above.

Comand Line Utilities:
leafcount
Count case-case (leaves) and case-feature (branches) coocurance and output in tsv (the only functionality availible on the comand line)
Usage of ./leafcount:
  -branches="branches.tsv": a case by feature sparse matrix of leaf cooccurance in tsv format
  -fm="featurematrix.afm": AFM formated feature matrix to use.
  -leaves="leaves.tsv": a case by case sparse matrix of leaf cooccurance in tsv format
  -rfpred="rface.sf": A predictor forest as outputed by rf-ace

Output graphs may be layed out/visualized with other ISB projects inluding:
https://github.com/ryanbressler/GraphSpectrometer
https://github.com/rbkreisberg/QED

Road Map:
Abstraction of collection data structures to support in memory or from disc/over network computation. 
Iterative/online computation on forests to support monitoring/steering of in progress computation.
Growing and application of Random Forests predictors in pure go.
